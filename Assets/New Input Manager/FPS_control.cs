//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.5.1
//     from Assets/New Input Manager/FPS_control.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @FPS_control: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @FPS_control()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""FPS_control"",
    ""maps"": [
        {
            ""name"": ""Player_map"",
            ""id"": ""e79a62a3-f33c-4c1d-a624-5c4e8658a286"",
            ""actions"": [
                {
                    ""name"": ""Movement"",
                    ""type"": ""PassThrough"",
                    ""id"": ""bcfd624a-5aec-47eb-bee8-89f2fc3a6d57"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Jump"",
                    ""type"": ""Button"",
                    ""id"": ""e01da4ec-903c-4aa8-a76f-0b7aa9807d86"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Dash"",
                    ""type"": ""Button"",
                    ""id"": ""c74a2d3d-f75a-4679-9e8e-ad45222377f1"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Squat"",
                    ""type"": ""Button"",
                    ""id"": ""5f6ed3dc-7d11-4b22-bd93-1aacb698a906"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Run"",
                    ""type"": ""Button"",
                    ""id"": ""4ecdf6c9-643c-4edf-aceb-b02ebfd4c07e"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""OpenDoor"",
                    ""type"": ""Button"",
                    ""id"": ""b522c6ef-4dd8-4fcd-9bb4-f195a9c29ccd"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""2D Vector"",
                    ""id"": ""4ff40c01-abc6-4161-bfab-0c999626e621"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""3c22266f-98fc-4ec3-be5b-28c843d5ede3"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""9019d610-4b8b-4527-9ea7-21a7c3c78fa2"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""b422a2c4-30e6-48f6-ae67-eed0a23bb986"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""31865bbd-66ce-4fdc-af73-453dea46fd41"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""4aff582d-c51b-4eff-bae1-96a9af42304e"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Jump"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""22eb091a-760e-4dc4-8c98-1a703186ed77"",
                    ""path"": ""<Keyboard>/e"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Dash"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""c4df8172-dc89-46be-8668-4356fecaf990"",
                    ""path"": ""<Keyboard>/leftCtrl"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Squat"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""c0ead264-297c-402b-a4d3-6a645d0211fa"",
                    ""path"": ""<Keyboard>/leftShift"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Run"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""5e01d721-550f-4667-8782-52b17ee7b2b4"",
                    ""path"": ""<Keyboard>/f"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""OpenDoor"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Player_map
        m_Player_map = asset.FindActionMap("Player_map", throwIfNotFound: true);
        m_Player_map_Movement = m_Player_map.FindAction("Movement", throwIfNotFound: true);
        m_Player_map_Jump = m_Player_map.FindAction("Jump", throwIfNotFound: true);
        m_Player_map_Dash = m_Player_map.FindAction("Dash", throwIfNotFound: true);
        m_Player_map_Squat = m_Player_map.FindAction("Squat", throwIfNotFound: true);
        m_Player_map_Run = m_Player_map.FindAction("Run", throwIfNotFound: true);
        m_Player_map_OpenDoor = m_Player_map.FindAction("OpenDoor", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Player_map
    private readonly InputActionMap m_Player_map;
    private List<IPlayer_mapActions> m_Player_mapActionsCallbackInterfaces = new List<IPlayer_mapActions>();
    private readonly InputAction m_Player_map_Movement;
    private readonly InputAction m_Player_map_Jump;
    private readonly InputAction m_Player_map_Dash;
    private readonly InputAction m_Player_map_Squat;
    private readonly InputAction m_Player_map_Run;
    private readonly InputAction m_Player_map_OpenDoor;
    public struct Player_mapActions
    {
        private @FPS_control m_Wrapper;
        public Player_mapActions(@FPS_control wrapper) { m_Wrapper = wrapper; }
        public InputAction @Movement => m_Wrapper.m_Player_map_Movement;
        public InputAction @Jump => m_Wrapper.m_Player_map_Jump;
        public InputAction @Dash => m_Wrapper.m_Player_map_Dash;
        public InputAction @Squat => m_Wrapper.m_Player_map_Squat;
        public InputAction @Run => m_Wrapper.m_Player_map_Run;
        public InputAction @OpenDoor => m_Wrapper.m_Player_map_OpenDoor;
        public InputActionMap Get() { return m_Wrapper.m_Player_map; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(Player_mapActions set) { return set.Get(); }
        public void AddCallbacks(IPlayer_mapActions instance)
        {
            if (instance == null || m_Wrapper.m_Player_mapActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_Player_mapActionsCallbackInterfaces.Add(instance);
            @Movement.started += instance.OnMovement;
            @Movement.performed += instance.OnMovement;
            @Movement.canceled += instance.OnMovement;
            @Jump.started += instance.OnJump;
            @Jump.performed += instance.OnJump;
            @Jump.canceled += instance.OnJump;
            @Dash.started += instance.OnDash;
            @Dash.performed += instance.OnDash;
            @Dash.canceled += instance.OnDash;
            @Squat.started += instance.OnSquat;
            @Squat.performed += instance.OnSquat;
            @Squat.canceled += instance.OnSquat;
            @Run.started += instance.OnRun;
            @Run.performed += instance.OnRun;
            @Run.canceled += instance.OnRun;
            @OpenDoor.started += instance.OnOpenDoor;
            @OpenDoor.performed += instance.OnOpenDoor;
            @OpenDoor.canceled += instance.OnOpenDoor;
        }

        private void UnregisterCallbacks(IPlayer_mapActions instance)
        {
            @Movement.started -= instance.OnMovement;
            @Movement.performed -= instance.OnMovement;
            @Movement.canceled -= instance.OnMovement;
            @Jump.started -= instance.OnJump;
            @Jump.performed -= instance.OnJump;
            @Jump.canceled -= instance.OnJump;
            @Dash.started -= instance.OnDash;
            @Dash.performed -= instance.OnDash;
            @Dash.canceled -= instance.OnDash;
            @Squat.started -= instance.OnSquat;
            @Squat.performed -= instance.OnSquat;
            @Squat.canceled -= instance.OnSquat;
            @Run.started -= instance.OnRun;
            @Run.performed -= instance.OnRun;
            @Run.canceled -= instance.OnRun;
            @OpenDoor.started -= instance.OnOpenDoor;
            @OpenDoor.performed -= instance.OnOpenDoor;
            @OpenDoor.canceled -= instance.OnOpenDoor;
        }

        public void RemoveCallbacks(IPlayer_mapActions instance)
        {
            if (m_Wrapper.m_Player_mapActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IPlayer_mapActions instance)
        {
            foreach (var item in m_Wrapper.m_Player_mapActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_Player_mapActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public Player_mapActions @Player_map => new Player_mapActions(this);
    public interface IPlayer_mapActions
    {
        void OnMovement(InputAction.CallbackContext context);
        void OnJump(InputAction.CallbackContext context);
        void OnDash(InputAction.CallbackContext context);
        void OnSquat(InputAction.CallbackContext context);
        void OnRun(InputAction.CallbackContext context);
        void OnOpenDoor(InputAction.CallbackContext context);
    }
}
